import { doDelete, doGet, doPost, doPut } from '..'import { Paginacion } from '../../Types/paginacion'import { typeOpciones } from '../../Types/types'import { Rol} from './Rol'import { Permiso} from './Permiso'export class RolPermiso {  id: number  rolId: number  permisoId: number  fechaAlta: string  usuarioAltaId: number  fechaBaja? : string  usuarioBajaId? : number  fechaModificacion? : string  usuarioModificacionId? : number  rol: Rol  permiso: Permiso   constructor() {    this.id = 0;    this.rolId = 0;    this.permisoId = 0;    this.fechaAlta = "";    this.usuarioAltaId = 0;    this.fechaBaja = "";    this.usuarioBajaId = 0;    this.fechaModificacion = "";    this.usuarioModificacionId = 0;    this.rol = new Rol();    this.permiso = new Permiso();  }  static async TraerUno(id: number, { inc = '', cant = 0, pag = 0, orden = '' }: typeOpciones): Promise<Paginacion<RolPermiso> | null> {    return await doGet(`/RolesPermisos/${id}?inc=${inc}&cant=${cant}&pag=${pag}&orden=${orden}`)  }  static async TraerTodos({ inc = '', cant = 0, pag = 0, orden = '' }: typeOpciones): Promise<Paginacion<RolPermiso> | null> {    return await doGet(`/RolesPermisos?inc=${inc}&cant=${cant}&pag=${pag}&orden=${orden}`)  }  static async Buscar(busqueda: string, { inc = '', cant = 0, pag = 0, orden = '' }: typeOpciones): Promise<Paginacion<RolPermiso> | null> {    if (busqueda === undefined || busqueda === null || busqueda === '') {      return null    }    const ret = await doGet(`/RolesPermisos/${busqueda}__ax?inc=${inc}&cant=${cant}&pag=${pag}&orden=${orden}`)     return ret   }   static async Guardar(entidad: RolPermiso) {      let resp: Paginacion<RolPermiso>      if (entidad.id > 0) {         resp = await doPut(`/RolesPermisos`, entidad)      } else {         resp = await doPost(`/RolesPermisos`, entidad)      }      return resp   }   static async Eliminar(id: number) {      return await doDelete(`/RolesPermisos`, id)   }}