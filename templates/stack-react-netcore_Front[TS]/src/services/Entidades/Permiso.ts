import { doDelete, doGet, doPost, doPut } from '..'import { Paginacion } from '../../Types/paginacion'import { typeOpciones } from '../../Types/types'import { Sitio} from './Sitio'import { RolPermiso} from './RolPermiso'export class Permiso {  id: number  sitioId: number  descripcionPermiso: string  url: string  posicion: number  fechaAlta: string  usuarioAltaId: number  fechaBaja? : string  usuarioBajaId? : number  fechaModificacion? : string  usuarioModificacionId? : number  sitio: Sitio  rolPermisos: RolPermiso[]   constructor() {    this.id = 0;    this.sitioId = 0;    this.descripcionPermiso = "";    this.url = "";    this.posicion = 0;    this.fechaAlta = "";    this.usuarioAltaId = 0;    this.fechaBaja = "";    this.usuarioBajaId = 0;    this.fechaModificacion = "";    this.usuarioModificacionId = 0;    this.sitio = new Sitio();    this.rolPermisos = new Array<RolPermiso>();  }  static async TraerUno(id: number, { inc = '', cant = 0, pag = 0, orden = '' }: typeOpciones): Promise<Paginacion<Permiso> | null> {    return await doGet(`/Permisos/${id}?inc=${inc}&cant=${cant}&pag=${pag}&orden=${orden}`)  }  static async TraerTodos({ inc = '', cant = 0, pag = 0, orden = '' }: typeOpciones): Promise<Paginacion<Permiso> | null> {    return await doGet(`/Permisos?inc=${inc}&cant=${cant}&pag=${pag}&orden=${orden}`)  }  static async Buscar(busqueda: string, { inc = '', cant = 0, pag = 0, orden = '' }: typeOpciones): Promise<Paginacion<Permiso> | null> {    if (busqueda === undefined || busqueda === null || busqueda === '') {      return null    }    const ret = await doGet(`/Permisos/${busqueda}__ax?inc=${inc}&cant=${cant}&pag=${pag}&orden=${orden}`)     return ret   }   static async Guardar(entidad: Permiso) {      let resp: Paginacion<Permiso>      if (entidad.id > 0) {         resp = await doPut(`/Permisos`, entidad)      } else {         resp = await doPost(`/Permisos`, entidad)      }      return resp   }   static async Eliminar(id: number) {      return await doDelete(`/Permisos`, id)   }}